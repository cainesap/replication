colnames(CPs) <- c('exam', 'candidate', 'section', 'recording', 'startline', 'windowsize', 'GsWords', 'CsWords', 'CsGsPerc', 'CsMatches', 'CsMatchPerc')#
#
ggplot(data = CPs, aes(x = GsWords, y = CsMatchPerc), group = candidate) + geom_point()
colnames(CPs) <- c('exam', 'candidate', 'section', 'recording', 'startline', 'windowsize', 'GsWords', 'CsWords', 'CsGsPerc', 'CsMatches', 'CsMatchPerc')#
#
ggplot(data = CPs, aes(x = GsWords, y = CsMatchPerc), colour = candidate) + geom_point()
CPs
ggplot(data = CPs, aes(x = GsWords, y = CsMatchPerc)) + geom_point() + facet_wrap(~ candidate)
ggplot(data = CPs, aes(x = GsWords, y = CsMatchPerc, fill = exam)) + geom_point()
ggplot(data = CPs, aes(x = GsWords, y = CsMatchPerc, colour = exam)) + geom_point()
ggplot(data = CPs, aes(x = GsWords, y = CsMatchPerc, colour = candidate)) + geom_point()
ggplot(data = CPs, aes(x = GsWords, y = CsMatchPerc, colour = candidate)) + geom_point() + facet_wrap(~ candidate) + theme(legend.pos = none)
ggplot(data = CPs, aes(x = GsWords, y = CsMatchPerc, colour = candidate)) + geom_point() + facet_wrap(~ candidate) + theme(legend.position = 'none')
ggplot(data = CPs, aes(x = GsWords, y = CsMatchPerc, colour = candidate)) + geom_point() + facet_wrap(~ section)
ggplot(data = CPs, aes(x = GsWords, y = CsMatchPerc, colour = section)) + geom_point() + facet_wrap(~ candidate)
ggplot(data = CPs, aes(x = GsWords, y = CsMatchPerc, colour = section)) + geom_point(size = 3) + facet_wrap(~ candidate)
ggplot(data = CPs, aes(x = GsWords, y = CsMatchPerc, colour = section)) + geom_point(size = 3, shape = 9) + facet_wrap(~ candidate)
ggplot(data = CPs, aes(x = GsWords, y = CsMatchPerc, colour = section)) + geom_point(size = 3, shape = 15) + facet_wrap(~ candidate)
library(shiny)
runGitHub( "https://github.com/DTALcompLingCluster/ALTA/tree/master/presentations/shinyPlots/parseProbs", "cainesap")
runGitHub( "ALTA/tree/master/presentations/shinyPlots/parseProbs", "cainesap")
runGitHub( "DTALcompLingCluster/ALTA/tree/master/presentations/shinyPlots/parseProbs", "cainesap")
?runGitHub
runGitHub( "ALTA/tree/master/presentations/shinyPlots/parseProbs", "DTALcompLingCluster")
runGitHub( "parseProbs", "cainesap")
?runGitHub
runGitHub( "parseProbs", "DTALcompLingCluster", subdir = "ALTA/presentations/shinyPlots")
install.packages('ggplot2')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='cainesap', token='8116B27409074D8320892DBE6CDF0E99', secret='q2fAUjGE8zndqNjUP8DXfNL3JkXjYEhYloGKosYr')
install.packages('languageR')
install.packages('shiny')
data <- read.csv('~/Downloads/2008.csv')
str(data)
max(data$DepTime)
max(na.omit(data$DepTime))
min(na.omit(data$DepTime))
seq(0, 2300, by=100)
hourstart <- seq(1, 2301, by = 100)#
hourend <- seg(100, 2400, by = 100)
hourstart <- seq(1, 2301, by = 100)#
hourend <- seq(100, 2400, by = 100)
hourstart
hourend
for (h in 1:24) {#
	print(hourstart[h])#
	print(hourend[h])#
}
str(data)
for (h in 1:24) {#
	flights <- nrow(subset(data, DepTime >= hourstart[h] | DepTime <= hourend[h]))#
	print(paste(h, flights))#
}
totalflights <- 0#
for (h in 1:24) {#
	flights <- nrow(subset(data, DepTime >= hourstart[h] & DepTime <= hourend[h]))#
	print(paste(h, flights))#
	totalflights <- totalflights + flights#
}#
print(totalflights)
str(data)
totalflights <- 0#
for (h in 1:24) {#
	flights <- nrow(subset(data, DepTime >= hourstart[h] & DepTime <= hourend[h]))#
	delays <- sum(subset(data, DepTime >= hourstart[h] & DepTime <= hourend[h])$DepDelay)#
	print(paste(h, flights, delays))#
	totalflights <- totalflights + flights#
}#
print(totalflights)
totalflights <- 0#
for (h in 1:24) {#
	subs <- subset(data, DepTime >= hourstart[h] & DepTime <= hourend[h])#
	flights <- nrow(subs)#
	delays <- sum(subs$DepDelay)#
	print(paste(h, flights, delays))#
	totalflights <- totalflights + flights#
}#
print(totalflights)
str(subs)
head(subs)
totalflights <- 0#
for (h in 1:24) {#
	subs <- subset(data, DepTime >= hourstart[h] & DepTime <= hourend[h])#
	subs$DepDiff <- subs$DepDelay - subs$DepTime#
	flights <- nrow(subs)#
	delays <- sum(subs$DepDiff)#
	print(paste(h, flights, delays))#
	totalflights <- totalflights + flights#
}#
print(totalflights)
totalflights <- 0#
for (h in 1:24) {#
	subs <- subset(data, DepTime >= hourstart[h] & DepTime <= hourend[h])#
	flights <- nrow(subs)#
	delays <- sum(subs$DepDelay)#
	delayRate <- delays / flights#
	print(paste(h, flights, delayRate))#
	totalflights <- totalflights + flights#
}#
print(totalflights)
hourstart <- seq(1, 2301, by = 100)#
hourend <- seq(100, 2400, by = 100)#
#
totalflights <- 0#
results <- data.frame()#
for (h in 1:24) {#
	subs <- subset(data, DepTime >= hourstart[h] & DepTime <= hourend[h])#
	flights <- nrow(subs)#
	delays <- sum(subs$DepDelay)#
	delayRate <- delays / flights#
	line <- data.frame(h, flights, delayRate)#
	results <- rbind(results, line)#
	totalflights <- totalflights + flights#
}#
col.names(results) <- c("hour-of-day", "total-flights", "delay-per-flight")#
print(results)#
print(paste("total number of flights =", totalflights))
library(googlevis)
library(googleVis)
str(data)
totalflights <- 0#
results <- data.frame()#
airlines <- unique(data$UniqueCarrier)#
for (h in 1:24) {#
	for (a in airlines){#
		subs <- subset(data, DepTime >= hourstart[h] & DepTime <= hourend[h] & UniqueCarrier == a)#
		flights <- nrow(subs)#
		delays <- sum(subs$DepDelay)#
		delayRate <- delays / flights#
		line <- data.frame(h, a, flights, delayRate)#
		results <- rbind(results, line)#
		totalflights <- totalflights + flights#
	}#
}#
col.names(results) <- c("hour-of-day", "airline", "total-flights", "delay-per-flight")#
print(results)#
print(paste("total number of flights =", totalflights))
motion <- gvisMotionChart(results, idvar = "airline", timevar = "hour-of-day")
str(results)
col.names(results) <- c("hour-of-day", "airline", "total-flights", "delay-per-flight")
col.name(results) <- c("hour-of-day", "airline", "total-flights", "delay-per-flight")
colnames(results) <- c("hour-of-day", "airline", "total-flights", "delay-per-flight")
str(results)
str(data)
motion <- gvisMotionChart(results, idvar = "airline", timevar = "hour-of-day")
plot(motion)
test <- read.csv('~/Downloads/1987.csv.bz2')
str(test)
years <- 1987:2008
years
library(revealjs)
?render
?revealjs
str(mtcars)
?mtcars
p <- ggplot(data = mtcars, aes(x = factor(cyl), y = mpg))
p + geom_point()
p + geom_point(factor(cyl))
p + geom_point(aes(colour = factor(cyl)))
p + geom_point(aes(colour = factor(cyl))) + theme_bw()
p + geom_point(aes(shape = factor(cyl))) + scale_shape(solid = FALSE)
?mtcars
p + geom_point(aes(colour = factor(cyl))) + theme_bw() + facet_wrap(~ am)
p + geom_point(aes(colour = factor(cyl), size = 5)) + theme_bw() + facet_wrap(~ am)
p <- ggplot(data = mtcars, aes(x = wt, y = mpg))
p + geom_point(aes(colour = factor(cyl), size = 5)) + theme_bw() + facet_wrap(~ am)
p + geom_point(aes(colour = factor(cyl)), size = 5) + theme_bw() + facet_wrap(~ am)
table(mtcars)
?table
summary(mtcars)
table(mtcars$cylinder)
table(mtcars$cyl)
str(mtcars)
table(mtcars$mpg)
table(mtcars$wt)
table(mtcars$gear)
cyltab <- table(mtcars$cyl)
cyltab
?iris
cars
str(Andrew)
library(googleVis)
str(Andrew)
class <- c('mc', 'wc', 'mc', 'wc', 'mc', 'wc', 'mc', 'wc', 'mc', 'wc', 'mc', 'wc', 'mc', 'wc', 'mc', 'wc')#
age <- c('older', 'older', 'older', 'older', 'younger', 'younger', 'younger', 'younger', 'older', 'older', 'older', 'older', 'younger', 'younger', 'younger', 'younger')#
gender <- c('female', 'female', 'male', 'male', 'female', 'female', 'male', 'male', 'female', 'female', 'male', 'male', 'female', 'female', 'male', 'male')#
genre <- c('conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'lists', 'lists', 'lists', 'lists', 'lists', 'lists', 'lists', 'lists')#
laryng <- c(.32, .41, .92, .86, .67, .83, .86, .95, .32, .41, .91, .86, .67, .83, .85, .95)#
#
df <- data.frame(class, age, gender, genre, laryng)
df
p <- ggplot(data = df, aes(x = age, y = class))
p + geom_point(aes(colour = gender, size = laryng)) + facet_wrap(~ genre)
p + geom_point(aes(colour = gender, size = laryng, position = "jitter")) + facet_wrap(~ genre)
p + geom_point(aes(colour = gender, size = laryng, position = jitter)) + facet_wrap(~ genre)
p + geom_point(aes(colour = gender, size = laryng), position = jitter) + facet_wrap(~ genre)
p + geom_point(aes(colour = gender, size = laryng), position = "jitter") + facet_wrap(~ genre)
p + geom_point(aes(colour = gender, size = laryng), position = "dodge") + facet_wrap(~ genre)
p <- ggplot(data = df, aes(x = age + gender, y = laryng))
p + geom_point(aes(colour = gender), position = "dodge")
p <- ggplot(data = df, aes(x = age, y = laryng))
p + geom_point(aes(colour = gender), position = "dodge") + facet_wrap(class ~ genre)
p + geom_bar(aes(colour = gender), position = "dodge") + facet_wrap(genre ~ class)
p + geom_bar(aes(colour = gender)) + facet_wrap(genre ~ class)
p + geom_bar(aes(colour = gender), stat = "identity") + facet_wrap(genre ~ class)
p + geom_bar(aes(fill = gender, group = gender), stat = "identity") + facet_wrap(genre ~ class)
p + geom_bar(aes(fill = gender, group = gender), stat = "identity", position = "dodge") + facet_wrap(genre ~ class)
p + geom_bar(aes(fill = gender, group = gender), stat = "identity", position = "dodge") + facet_wrap(genre ~ class, ncol = 4)
p + geom_bar(aes(fill = gender, group = gender), stat = "identity", position = "dodge") + facet_wrap(class ~ genre, ncol = 4)
df
laryng <- c(.32, .41, .92, .86, .67, .83, .86, .95, 0, .1, .13, .78, .2, .54, .53, .82)#
#
df <- data.frame(class, age, gender, genre, laryng)#
#
p <- ggplot(data = df, aes(x = age, y = laryng))#
p + geom_bar(aes(fill = gender, group = gender), stat = "identity", position = "dodge") + facet_wrap(class ~ genre, ncol = 4)
p + geom_bar(aes(fill = gender, group = gender), stat = "identity", position = "dodge") + facet_wrap(class ~ genre, ncol = 4) + theme_bw()
p <- ggplot(data = df, aes(x = age, y = laryng))
p + geom_point(aes(colour = gender, shape = class)) + facet_wrap(~ genre)
p + geom_point(aes(colour = gender, shape = class), size = 5) + facet_wrap(~ genre)
p + geom_point(aes(colour = gender, shape = class), size = 4) + facet_wrap(~ genre)
df$age <- factor(df$age, levels = c("younger", "older"))#
#
## make plot#
p <- ggplot(data = df, aes(x = age, y = laryng))#
p + geom_point(aes(colour = gender, shape = class), size = 4) + facet_wrap(~ genre)
library(ggmap)
geocode('Cambridge, U.K.')
cam <- geocode('Cambridge, U.K.')
cammap <- get_map(location = cam, source = 'stamen', maptype = 'toner', crop = FALSE)
?get_map
cam
cam[1]
cammap <- get_map(location = c(lat = cam[1], lat = cam[2]), source = 'stamen', maptype = 'toner', crop = FALSE)
cammap <- get_map(location = c(lon = cam[1], lat = cam[2]), source = 'stamen', maptype = 'toner', crop = FALSE)
cammap <- get_map(location = c(lon = cam$lon, lat = cam$lat), source = 'stamen', maptype = 'toner', crop = FALSE)
ggmap(cammap)
cammap <- get_map(location = c(lon = cam$lon, lat = cam$lat), source = 'stamen', maptype = 'toner', crop = FALSE, zoom = 10)
ggmap(cammap)
cammap <- get_map(location = c(lon = cam$lon, lat = cam$lat), source = 'stamen', maptype = 'toner', crop = FALSE, zoom = 12)
ggmap(cammap)
cammap <- get_map(location = c(lon = cam$lon, lat = cam$lat), source = 'stamen', maptype = 'toner', crop = FALSE, zoom = 14)
ggmap(cammap)
cammap <- get_map(location = c(lon = cam$lon, lat = cam$lat), source = 'stamen', maptype = 'toner', crop = FALSE, zoom = 15)
ggmap(cammap)
cammap <- get_map(location = c(lon = cam$lon, lat = cam$lat), source = 'stamen', maptype = 'watercolor', crop = FALSE, zoom = 15)
cammap <- get_map(location = c(lon = cam$lon, lat = cam$lat), source = 'stamen', maptype = 'watercolor', crop = FALSE, zoom = 14)
cammap <- get_map(location = c(lon = cam$lon, lat = cam$lat), source = 'stamen', maptype = 'toner', crop = FALSE, zoom = 14)
ggmap(cammap)
?get_map
install.packages('BH')
install.packages('markdown')
library(lme)
library(lme4)
install.packages('lme4')
library(lme4)
?lme4
version(lme4)
packageVersion(lme4)
packageVersion('lme4')
sessionInfo()
library(car)
install.packages('car')
library(car)
download.file('http://www.let.rug.nl/wieling/statscourse/lecture1/lab/myFunctions.R', 'myFunctions.R')#
download.file('http://www.let.rug.nl/wieling/statscourse/lecture1/lab/lexdec.rda', 'lexdec.rda')
source('myFunctions.R')
load('lexdec.rda')
head(lexdec)
str(lexdec)
plot(density(lexdec$Frequency)) # e.g., to investigate distributions
plot(density(exp(lexdec$Frequency)))
lexdec2 = lexdec[exp(lexdec$RT)>200 & exp(lexdec$RT) < 1100,]
nrow(lexdec2)/nrow(lexdec) # 97.6% retained
lexdec3 = lexdec2[lexdec2$Correct == 'correct',]
linearModel = lm(RT ~ Trial, data=lexdec3)
summary(linearModel)
library(gplots)
install.packages('gplots')
download.file('http://www.let.rug.nl/wieling/statscourse/lecture2/lab/myFunctions.R', 'myFunctions.R')#
download.file('http://www.let.rug.nl/wieling/statscourse/lecture2/lab/eye.rda', 'eye.rda')#
download.file('http://www.let.rug.nl/wieling/statscourse/lecture2/lab/eyeAll.rda', 'eyeAll.rda')#
#
source('myFunctions.R') # custom functions#
load('eye.rda') # data for mixed-effects regression#
load('eyeAll.rda') # data for making focus plots#
#
# A3. data investigation#
head(eye)
str(eye)
plot(density(eye$Age)) # e.g., to investigate distributions
?myFocusPlot
model  = lmer( FocusDiff ~ (1|Subject) + (1|Item) , data = eye )
summary(model)
myInterceptPlot(eye,"FocusDiff","TrialID","Subject",model) # for subjects
myInterceptPlot(eye,"FocusDiff","TrialID","Item",model) # for items
model1 = lmer(FocusDiff ~ (1|Subject),  data=eye)#
model2 = lmer(FocusDiff ~ (1|Subject) + (1|Item),  data=eye)#
AIC(model1) - AIC(model2) # < 2, so no
model3 = lmer(FocusDiff ~ SameColor + (1|Subject), data=eye)
model4 = lmer(FocusDiff ~ IsMale + (1|Subject), data=eye)
model5 = lmer(FocusDiff ~ IsMale + TargetNeuter + SameGender + (1|Subject), #
              data=eye)
model6 = lmer(FocusDiff ~ IsMale + TargetNeuter * SameGender + (1|Subject), #
              data=eye)
model4b = lmer(FocusDiff ~ IsMale + (1|Subject), data=eye, REML=F)#
model6b = lmer(FocusDiff ~ IsMale + TargetNeuter * SameGender + (1|Subject), #
               data=eye, REML=F)#
#
# EXERCISE 3. Do we need the interaction (i.e. compare model4b and model6b)?#
#
# ANSWER 3:#
AIC(model4b) - AIC(model6b) # > 2, so we need the interaction
model6 = lmer(FocusDiff ~ IsMale + TargetNeuter * SameGender + (1|Subject), #
              data=eye)#
model7 = lmer(FocusDiff ~ IsMale + TargetNeuter * SameGender + #
              (1 + TargetNeuter * SameGender|Subject), data=eye)#
#
summary(model7)
AIC(model6) - AIC(model7) # not better
model8 = lmer(FocusDiff ~ IsMale + TargetNeuter * SameGender + TargetColor + #
                          (1|Subject), data=eye)#
summary(model8) # it appears we need a contrast for brow
eye$TargetBrown = (eye$TargetColor == "brown")*1 # 1 if brown, 0 otherwise#
#
# EXERCISE 4. Add the contrast TargetBrown to the best previous model (model6)#
#             and test if the model is better than the more complex model (model8).#
#             Store the model as model9.#
#
# ANSWER 4:#
model9 = lmer(FocusDiff ~ IsMale + TargetNeuter * SameGender + TargetBrown + #
               (1|Subject), data=eye)#
summary(model9) # highly significant
model8b = lmer(FocusDiff ~ IsMale + TargetNeuter * SameGender + TargetColor + #
               (1|Subject), data=eye, REML=F)#
model9b = lmer(FocusDiff ~ IsMale + TargetNeuter * SameGender + TargetBrown + #
               (1|Subject), data=eye, REML=F)#
AIC(model9b) - AIC(model8b) # negative
cor(eye$FocusDiff, fitted(model9))^2
colnames(eye)
summary(model10 <- lmer(FocusDiff ~ IsMale + TargetNeuter * SameGender + TargetBrown + Age + #
                                    (1|Subject), data=eye)) # Age n.s.
summary(model10 <- lmer(FocusDiff ~ IsMale + TargetNeuter * SameGender + TargetBrown + TargetTopRight + #
                                    (1|Subject), data=eye)) # TargetTopRight sign.
summary(model10a <- lmer(FocusDiff ~ IsMale + TargetNeuter * SameGender + TargetBrown + TargetTopRight + #
                                     (1+TargetTopRight|Subject), data=eye)) # TargetTopRight still sign.
AIC(model10) - AIC(model10a) # 10a is better: random slope necessary
qqp(resid(model9)) # not normal
plot(scale(resid(model9)) ~ fitted(model9), pch='.',cex=2, ylim=c(-5,5))#
abline(h = c(-2.5, 2.5))
eye2 = eye[ abs(scale(resid(model9))) < 2 , ]#
(1-(nrow(eye2))/nrow(eye))*100 # 0.36% removed
model9.v2 = lmer(FocusDiff ~ IsMale + TargetNeuter * SameGender + TargetBrown + #
               (1|Subject), data=eye2)#
cor(eye$FocusDiff, fitted(model9))^2
cor(eye2$FocusDiff, fitted(model9.v2))^2 # improved prediction
qqp(resid(model9.v2)) # unfortunately, residuals not better
download.file('http://www.let.rug.nl/wieling/statscourse/lecture2/lab/answers/lab-including-answers.Rmd', 'lab-including-answers.Rmd')#
library(rmarkdown)#
render('lab-including-answers.Rmd') # generates html file with results#
browseURL(paste('file://', file.path(getwd(),'lab-including-answers.html'), sep=''))
structure(list(Task = c("Haptoglobin", "Transferrin", "A", "B", #
"C", "D", "E", "F", "G", "Haptoglobin", "Transferrin", "A", "B", #
"C", "D", "E", "F", "G"), Approach = c(1L, 1L, 1L, 1L, 1L, 1L, #
1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), Delivery.Date = c("May-16", #
"Sep-16", "Mar-17", "Sep-17", "Sep-17", "Nov-17", "Apr-18", "Apr-18", #
"May-18", "May-16", "Sep-16", "Jan-17", "Jan-17", "Mar-17", "Aug-17", #
"Aug-17", "Nov-17", "Feb-18"), Date = c("2016-05-16", "2016-05-16", #
"2017-03-14", "2017-09-26", "2017-09-26", "2017-11-21", "2018-04-10", #
"2018-04-10", "2018-05-08", "2016-05-16", "2016-09-05", "2017-01-17", #
"2017-01-17", "2017-03-04", "2017-08-01", "2017-08-01", "2017-11-21", #
"2018-02-06"), date = structure(c(16937, 16937, 17239, 17435, #
17435, 17491, 17631, 17631, 17659, 16937, 17049, 17183, 17183, #
17229, 17379, 17379, 17491, 17568), class = "Date"), taskID = c(9, #
8, 7, 6, 5, 4, 3, 2, 1, 9, 8, 7, 6, 5, 4, 3, 2, 1)), .Names = c("Task", #
"Approach", "Delivery.Date", "Date", "date", "taskID"), row.names = c(NA, #
-18L), class = "data.frame")#
#
approach_labller <- function(key, val){#
return(approach_key[val])#
}#
#
approach_key <- list('1'="Approach 1", '2'="Approach 2")
ggplot(ppps, aes(date, taskID)) + geom_point(colour="blue", size=4, shape=15) + scale_x_date(labels=date_format("%b-%y"), breaks=date_breaks('month')) + facet_grid(Approach ~ ., labeller=approach_labller) + scale_y_discrete(limits=c(9,8,7,6,5,4,3,2,1), labels=t) + theme_bw(panel.grid.major.x(colour="black", size=2)) + labs(y="Target", x="Date")
ppps <- structure(list(Task = c("Haptoglobin", "Transferrin", "A", "B", #
"C", "D", "E", "F", "G", "Haptoglobin", "Transferrin", "A", "B", #
"C", "D", "E", "F", "G"), Approach = c(1L, 1L, 1L, 1L, 1L, 1L, #
1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), Delivery.Date = c("May-16", #
"Sep-16", "Mar-17", "Sep-17", "Sep-17", "Nov-17", "Apr-18", "Apr-18", #
"May-18", "May-16", "Sep-16", "Jan-17", "Jan-17", "Mar-17", "Aug-17", #
"Aug-17", "Nov-17", "Feb-18"), Date = c("2016-05-16", "2016-05-16", #
"2017-03-14", "2017-09-26", "2017-09-26", "2017-11-21", "2018-04-10", #
"2018-04-10", "2018-05-08", "2016-05-16", "2016-09-05", "2017-01-17", #
"2017-01-17", "2017-03-04", "2017-08-01", "2017-08-01", "2017-11-21", #
"2018-02-06"), date = structure(c(16937, 16937, 17239, 17435, #
17435, 17491, 17631, 17631, 17659, 16937, 17049, 17183, 17183, #
17229, 17379, 17379, 17491, 17568), class = "Date"), taskID = c(9, #
8, 7, 6, 5, 4, 3, 2, 1, 9, 8, 7, 6, 5, 4, 3, 2, 1)), .Names = c("Task", #
"Approach", "Delivery.Date", "Date", "date", "taskID"), row.names = c(NA, #
-18L), class = "data.frame")#
#
approach_labller <- function(key, val){#
return(approach_key[val])#
}#
#
approach_key <- list('1'="Approach 1", '2'="Approach 2")
ggplot(ppps, aes(date, taskID)) + geom_point(colour="blue", size=4, shape=15) + scale_x_date(labels=date_format("%b-%y"), breaks=date_breaks('month')) + facet_grid(Approach ~ ., labeller=approach_labller) + scale_y_discrete(limits=c(9,8,7,6,5,4,3,2,1), labels=t) + theme_bw(panel.grid.major.x(colour="black", size=2)) + labs(y="Target", x="Date")
update.packages('ggplot2')
ggplot(ppps, aes(date, taskID)) + geom_point(colour="blue", size=4, shape=15) + scale_x_date(labels=date_format("%b-%y"), breaks=date_breaks('month')) + facet_grid(Approach ~ ., labeller=approach_labller) + scale_y_discrete(limits=c(9,8,7,6,5,4,3,2,1), labels=t) + theme_bw(panel.grid.major.x(colour="black", size=2)) + labs(y="Target", x="Date")
ggplot(ppps, aes(date, taskID)) + geom_point(colour="blue", size=4, shape=15) + scale_x_date(labels=date_format("%b-%y"), breaks=breaks('month')) + facet_grid(Approach ~ ., labeller=approach_labller) + scale_y_discrete(limits=c(9,8,7,6,5,4,3,2,1), labels=t) + theme_bw(panel.grid.major.x(colour="black", size=2)) + labs(y="Target", x="Date")
ggplot(ppps, aes(date, taskID)) + geom_point(colour="blue", size=4, shape=15) + scale_x_date(labels=date_format("%b-%y"), breaks='month') + facet_grid(Approach ~ ., labeller=approach_labller) + scale_y_discrete(limits=c(9,8,7,6,5,4,3,2,1), labels=t) + theme_bw(panel.grid.major.x(colour="black", size=2)) + labs(y="Target", x="Date")
?scale_x_date
packageVersion(ggplot2)
packageVersion(ggplot)
packageVersion('ggplot2')
scale_x_date
install.packages('mgcv')
library(mgcv)
library(car)
download.file('http://www.let.rug.nl/wieling/statscourse/lecture3/lab/myFunctions.R', 'myFunctions.R')#
download.file('http://www.let.rug.nl/wieling/statscourse/lecture3/lab/compareML.R', 'compareML.R')#
download.file('http://www.let.rug.nl/wieling/statscourse/lecture3/lab/dialectdata.rda', 'dialectdata.rda')#
#
source('myFunctions.R') # custom functions#
source('compareML.R') # custom function to compare models#
load('dialectdata.rda') # Dutch dialect data, subset of 48 words
model1 = gam(LD ~ s(Longitude,Latitude), data=dialectdata, method='ML')#
summary(model1)
library(scales)
ppps <- structure(list(Task = c("Haptoglobin", "Transferrin", "A", "B", #
"C", "D", "E", "F", "G", "Haptoglobin", "Transferrin", "A", "B", #
"C", "D", "E", "F", "G"), Approach = c(1L, 1L, 1L, 1L, 1L, 1L, #
1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), Delivery.Date = c("May-16", #
"Sep-16", "Mar-17", "Sep-17", "Sep-17", "Nov-17", "Apr-18", "Apr-18", #
"May-18", "May-16", "Sep-16", "Jan-17", "Jan-17", "Mar-17", "Aug-17", #
"Aug-17", "Nov-17", "Feb-18"), Date = c("2016-05-16", "2016-05-16", #
"2017-03-14", "2017-09-26", "2017-09-26", "2017-11-21", "2018-04-10", #
"2018-04-10", "2018-05-08", "2016-05-16", "2016-09-05", "2017-01-17", #
"2017-01-17", "2017-03-04", "2017-08-01", "2017-08-01", "2017-11-21", #
"2018-02-06"), date = structure(c(16937, 16937, 17239, 17435, #
17435, 17491, 17631, 17631, 17659, 16937, 17049, 17183, 17183, #
17229, 17379, 17379, 17491, 17568), class = "Date"), taskID = c(9, #
8, 7, 6, 5, 4, 3, 2, 1, 9, 8, 7, 6, 5, 4, 3, 2, 1)), .Names = c("Task", #
"Approach", "Delivery.Date", "Date", "date", "taskID"), row.names = c(NA, #
-18L), class = "data.frame")#
#
approach_labller <- function(key, val){#
return(approach_key[val])#
}#
#
approach_key <- list('1'="Approach 1", '2'="Approach 2")
ggplot(ppps, aes(date, taskID)) + geom_point(colour="blue", size=4, shape=15) + scale_x_date(labels=date_format("%b-%y"), breaks=date_breaks('month')) + facet_grid(Approach ~ ., labeller=approach_labller) + scale_y_discrete(limits=c(9,8,7,6,5,4,3,2,1), labels=t) + theme_bw(panel.grid.major.x(colour="black", size=2)) + labs(y="Target", x="Date")
ggplot(ppps, aes(date, taskID)) + geom_point(colour="blue", size=4, shape=15) + scale_x_date(labels=date_format("%b-%y"), breaks=date_breaks('month')) + facet_grid(Approach ~ ., labeller=approach_labller) + scale_y_discrete(limits=c(9,8,7,6,5,4,3,2,1), labels=t)
scale_x_date
ggplot(ppps, aes(date, taskID)) + geom_point(colour="blue", size=4, shape=15) + scale_x_date(labels=date_format("%b-%y"), minor_breaks=date_breaks('month'), breaks = date_breaks('year')) + facet_grid(Approach ~ ., labeller=approach_labller) + scale_y_discrete(limits=c(9,8,7,6,5,4,3,2,1), labels=t)
ggplot(ppps, aes(date, taskID)) + geom_point(colour="blue", size=4, shape=15) + scale_x_date(labels=date_format("%b-%y"), minor_breaks=date_breaks('month'), breaks = date_breaks('year')) + facet_grid(Approach ~ ., labeller=approach_labller) + scale_y_discrete(limits=c(9,8,7,6,5,4,3,2,1), labels=t) + theme_bw(panel.grid.major.x = (colour="black", size=2)) + labs(y="Target", x="Date")
ggplot(ppps, aes(date, taskID)) + geom_point(colour="blue", size=4, shape=15) + scale_x_date(labels=date_format("%b-%y"), minor_breaks=date_breaks('month'), breaks = date_breaks('year')) + facet_grid(Approach ~ ., labeller=approach_labller) + scale_y_discrete(limits=c(9,8,7,6,5,4,3,2,1), labels=t) + theme_bw(panel.grid.major.x = element(colour="black", size=2)) + labs(y="Target", x="Date")
ggplot(ppps, aes(date, taskID)) + geom_point(colour="blue", size=4, shape=15) + scale_x_date(labels=date_format("%b-%y"), minor_breaks=date_breaks('month'), breaks = date_breaks('year')) + facet_grid(Approach ~ ., labeller=approach_labller) + scale_y_discrete(limits=c(9,8,7,6,5,4,3,2,1), labels=t) + theme_bw(panel.grid.major.x = element_line(colour="black", size=2)) + labs(y="Target", x="Date")
ggplot(ppps, aes(date, taskID)) + geom_point(colour="blue", size=4, shape=15) + scale_x_date(labels=date_format("%b-%y"), minor_breaks=date_breaks('month'), breaks = date_breaks('year')) + facet_grid(Approach ~ ., labeller=approach_labller) + scale_y_discrete(limits=c(9,8,7,6,5,4,3,2,1), labels=t) + theme_bw(panel.grid.major.x = element_line(colour="black")) + labs(y="Target", x="Date")
ggplot(ppps, aes(date, taskID)) + geom_point(colour="blue", size=4, shape=15) + scale_x_date(labels=date_format("%b-%y"), minor_breaks=date_breaks('month'), breaks = date_breaks('year')) + facet_grid(Approach ~ ., labeller=approach_labller) + scale_y_discrete(limits=c(9,8,7,6,5,4,3,2,1), labels=t) + theme_bw(panel.grid.major = element_line(colour="black")) + labs(y="Target", x="Date")
ggplot(ppps, aes(date, taskID)) + geom_point(colour="blue", size=4, shape=15) + scale_x_date(labels=date_format("%b-%y"), minor_breaks=date_breaks('month'), breaks = date_breaks('year')) + facet_grid(Approach ~ ., labeller=approach_labller) + scale_y_discrete(limits=c(9,8,7,6,5,4,3,2,1), labels=t) + theme(panel.grid.major = element_line(colour="black")) + labs(y="Target", x="Date")
ggplot(ppps, aes(date, taskID)) + geom_point(colour="blue", size=4, shape=15) + scale_x_date(labels=date_format("%b-%y"), minor_breaks=date_breaks('month'), breaks = date_breaks('year')) + facet_grid(Approach ~ ., labeller=approach_labller) + scale_y_discrete(limits=c(9,8,7,6,5,4,3,2,1), labels=t) + theme(panel.grid.major.x = element_line(colour="black")) + labs(y="Target", x="Date")
ggplot(ppps, aes(date, taskID)) + geom_point(colour="blue", size=4, shape=15) + scale_x_date(labels=date_format("%b-%y"), minor_breaks=date_breaks('month'), breaks = date_breaks('year')) + facet_grid(Approach ~ ., labeller=approach_labller) + scale_y_discrete(limits=c(9,8,7,6,5,4,3,2,1), labels=t)
ggplot(ppps, aes(date, taskID)) + geom_point(colour="blue", size=4, shape=15) + scale_x_date(labels=date_format("%b-%y"), breaks = date_breaks('year'), minor_breaks = date_breaks('month')) + facet_grid(Approach ~ ., labeller=approach_labller) + scale_y_discrete(limits=c(9,8,7,6,5,4,3,2,1), labels=t)
ggplot(ppps, aes(date, taskID)) + geom_point(colour="blue", size=4, shape=15) + scale_x_date(labels=date_format("%b-%y"), breaks = date_breaks('year'), minor_breaks = date_breaks('month')) + facet_grid(Approach ~ ., labeller=approach_labller) + scale_y_discrete(limits=c(9,8,7,6,5,4,3,2,1), labels=t) + theme(panel.grid.major.x = element_line(colour="black")) + labs(y="Target", x="Date")
setwd('~/Dropbox/workspace/gitHub/replication/')
download.file('http://www.let.rug.nl/wieling/statscourse/lecture1/lab/answers/lab-including-answers.Rmd', 'lab-including-answers.Rmd')#
library(rmarkdown)#
render('lab-including-answers.Rmd') # generates html file with results#
browseURL(paste('file://', file.path(getwd(),'lab-including-answers.html'), sep='')) # shows result
